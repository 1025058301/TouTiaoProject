<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pers.lcy.toutiao.dao.MessageMapper">
  <resultMap id="BaseResultMap" type="pers.lcy.toutiao.model.Message">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="from_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="to_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="created_date" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="has_read" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="conversation_id" javaType="java.lang.String" jdbcType="VARCHAR" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="pers.lcy.toutiao.model.Message">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="from_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="to_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="created_date" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="has_read" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="conversation_id" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="content" javaType="java.lang.String" jdbcType="LONGVARCHAR" />
    </constructor>
  </resultMap>
  <insert id="insertMessaget" parameterType="pers.lcy.toutiao.model.Message">
    INSERT INTO message(from_id,to_id,created_date,has_read,conversation_id,content)
    VALUES (#{fromId},#{toId},#{createdDate},#{hasRead},#{conversationId},#{content})
  </insert>
  <select id="selectConversationDetails" resultType="pers.lcy.toutiao.model.Message">
    SELECT * FROM message WHERE conversation_id=#{conversationId} ORDER BY id DESC
  </select>
  <select id="selectConversation" resultType="pers.lcy.toutiao.model.Message">
    SELECT from_id,to_id,created_date,has_read,conversation_id,content,count(id) as id FROM
    (SELECT  * FROM message WHERE from_id=#{userId} OR to_id=#{userId} ORDER BY id desc) tt GROUP BY conversation_id ORDER BY tt.id desc
    LIMIT #{offset},#{limit}
  </select>
  <select id="selectUnReadCount" resultType="int">
    SELECT count(id) FROM message WHERE to_id=#{userId} AND has_read=0 AND conversation_id=#{conversationId}
  </select>
  <update id="updateMessageReadStatus">
    UPDATE message SET has_read=1 WHERE to_id=#{userId} AND conversation_id=#{conversationId}
  </update>
</mapper>